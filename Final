//HTML

<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.1/dist/phaser-arcade-physics.min.js"></script>
</head>
  <body>
  </body>
</html>



//JS

// startup
let phaserGame;
window.addEventListener("load", () => {
  if (phaserGame == null) {
    phaserGame = new PhaserGame();
    phaserGame.init();
  }
});

//establish keys that user can use
let keyD;
let keyF;
let keyJ;
let keyK;
let keyS;
let keyE;
let keyT;
let keyQ;

//format for game screen
class PhaserGame {
  init() {
    let config = {
      type: Phaser.AUTO,
      scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH
      },
      width: 1200,
      height: 900,
      scene: MenuScene,
      physics: {
        default: "arcade",
        arcade: {
          debug: false
        }
      }
    };

    this.game = new Phaser.Game(config);
  }
}

//menu scene
class MenuScene {
  preload() {
    this.load.image(
      "start",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/start%20menu%20final.png" //image for menu
    );
  }
  create() {
    keyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S); //add key, make it usable
    this.add.image(600, 450, "start"); //add menu image
  }

  update() {
    if (Phaser.Input.Keyboard.JustDown(keyS)) { //if the S key is pressed, go to the main scene (game)
      this.scene.add("main", MainScene);
      this.scene.start("main");
    }
  }
}

//main scene
class MainScene {
  preload() {
    this.load.audio(
      "song",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/Naruto Shippuden - OP3 - Blue Bird.ogg" //preload main audio
    );
    this.load.image(
      "purple button",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/purplebox.png" //preload all the buttons and balls
    );
    this.load.image(
      "mad ball",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/mad%20face%20ball.png"
    );
    this.load.image(
      "meh ball",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/meh%20face%20ball.png"
    );
    this.load.image(
      "sad ball",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/sad%20face%20ball.png"
    );
    this.load.image(
      "happy ball",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/smiley%20face%20ball.png"
    );
    this.load.image(
      "red button",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/redblock.png"
    );
    this.load.image(
      "yellow button",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/yellowbox.png"
    );
    this.load.image(
      "blue button",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/bluebox.png"
    );
    this.load.image(
      "sky",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/drawing%20sky%20updated.png" //preload background image, sky
    );
  }

  create() {
    //make all these keys usable
    keyF = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F);
    keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
    keyJ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);
    keyK = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.K);
    keyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
    keyQ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q);

    this.add.image(600, 450, "sky"); //add background image, sky

    this.timeToFall = 2000; //time for the note to go to the bottom. The lower the faster/hardest
    this.notes = []; // array of notes already spawned
    this.colliders = []; // colliders for player input vs falling note
    this.score = 0; // score
    this.startTime = Date.now(); //date.now is a number that is universal that we can use to record time.  Make start time that time
    
    //for each lane, we manually input different timestamps in which the notes will spawn at the top of the screen
    this.lane1 =[2150,2370,2550,7300,7500,11450,11570,13550,13850,27800,28880,29690,30600,31060,31750,33050,33610,34720,35180,35360,36130,36310,38210,38600,39030,39910,40580,42250,46310,46470,46850,47250,47450,49920,50330,50740,51570,51970,52750,56020,56270,59050,59250,59530,60090,62920,63900,65640,66370,67020,68680,68890,73250,74430,74630,75580,75760,77900,78130,78660,79020,80250,81010,81190,82090,82440,83410,92200];
    
    this.lane2 = [2150,2370,2550,3670,3900,5250,5550,6400,8600,12600,12850,13350,27800,28880,29280,30600,31060,32180,33300,35360,36790,37330,38370,42450,42810,43480,45420,45900,46470,46850,49110,49610,51140,52750,56020,56270,56930,57380,57580,59250,60090,62510,62920,64310,64490,65640,68520,68680,68890,70530,71410,71600,71910,72640,73250,74430,74630,75760,76610,76970,78840,79020,81010,81190,82090,82820,83220,83410,92200];
    
    this.lane3 = [6400,8600,9500,10000,12400,12850,14000,27800,28200,28530,29890,30150,31300,31500,31750,33610,34110,34720,36130,36310,37130,37660,38010,39210,40270,41890,43480,43760,46310,47250,47450,47810,48260,49610,51140,51970,54330,55730,55890,56930,57380,57940,59050,60720,62030,62230,63120,63570,64490,65640,69450,69950,70150,70530,74870,75400,76160,77150,77900,78130,78660,79330,79690,80050,81390,81720,81910,83220,83410,92200,100000];
    
    this.lane4 = [7100,8900,11570,14000,28200,28530,29890,32180,32610,32840,35520,35950,37660,38010,42450,42810,43320,44960,45340,47810,48260,49920,50740,52400,53580,55890,57580,57940,59050,59530,60720,62030,63570,63900,65070,65280,66370,67020,68520,70150,71600,71910,72640,73250,74870,75400,76610,76970,78280,78660,79330,80050,81390,83410,92200];
    
    
    

    //score text
    this.scoreText = this.add.text(100, 100, "SCORE", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "100px"
    });

    //text telling user what key to press to quit
    this.helpText = this.add.text(800, 130, "Press Q to quit", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "50px"
    });

    //make all the buttons
    this.add.image(240, 800, "purple button").setScale(2.5);
    this.add.image(480, 800, "red button").setScale(2.5);
    this.add.image(720, 800, "yellow button").setScale(2.5);
    this.add.image(960, 800, "blue button").setScale(2.5);
    
    //add text for each button with their corresponding key
    this.add.text(240, 800, "D", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "50px"
    });
    
    this.add.text(480, 800, "F", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "50px"
    });
    
    this.add.text(720, 800, "J", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "50px"
    });
    
    this.add.text(960, 800, "K", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "50px"
    });
    

    // We create the audio object and play it, adjusting volume, and delay for when the song will start.  Of course can't have song starting too early or the ball won't be able to get to the bottom of the screen in time.
    this.song = this.sound.add("song");
    this.song.volume = 0.1;
    this.song.play({
      mute: false,
      volume: 1,
      rate: 1,
      detune: 0,
      seek: 0,
      loop: false,
      delay: 0.88
    });
  }

  update() {
    //formula for time stamps, running time - start time + time to fall, then spawn balls accordingly at the right coordinate
    if (
      Date.now() - this.startTime + this.timeToFall >= this.lane1[0] && this.lane1.length > 0) {
      this.spawnNoteOne(240, 0);
      this.lane1.shift(); //shift time stamp out of the array
    } 
    if (
      Date.now() - this.startTime + this.timeToFall >= this.lane2[0] && this.lane2.length > 0) {
      this.spawnNoteTwo(480, 0);
      this.lane2.shift();
    }
    if (
      Date.now() - this.startTime + this.timeToFall >= this.lane3[0] && this.lane3.length > 0) {
      this.spawnNoteThree(720, 0);
      this.lane3.shift();
    }
    if (
      Date.now() - this.startTime + this.timeToFall >= this.lane4[0] && this.lane4.length > 0) {
      this.spawnNoteFour(960, 0);
      this.lane4.shift();
    }
    //once the last note has been spawned, prompt the user to check their score
    if (this.lane4.length == 1) {
      this.add.text(200, 300, "Check your score", {
      color: '#000',
      fontFamily: "arial",
      fontSize: "100px"
    });
      //then send the user back to the menu
      this.scene.add("menu", MenuScene);
      this.scene.start("menu");
    }
    //stop song, had a problem here where song would stop before scene change, so we gave the song stop it's own condition
    if (this.lane3.length == 1) {
      this.song.stop();
    }
    
    //if user preses, q, they are taken to the end scene and the song stops
if (Phaser.Input.Keyboard.JustDown(keyQ)) {
      this.song.stop();
      this.scene.add("end", EndScene);
      this.scene.start("end");
}
    this.handlePlayerInput(); //call function for player inputs
    this.checkNoteCollisions(); //call function to check if notes are in collision with colliders (buttons)
    
    if(this.score == -900){
      this.song.stop();
      this.scene.add("end", EndScene);
      this.scene.start("end");
    }
    
  }

  //for each lane of notes, we have a different asset which we called earlier.  we take the time stamp, push it into the array and make it so the note itself goes straight down.
  spawnNoteOne(x = 1200 / 2, y = 0, h = 900) {
    let note = this.add.image(x, y, "meh ball").setScale(5);
    this.notes.push(note);
    this.physics.add.existing(note);
    this.physics.moveTo(note, x, h, null, this.timeToFall);
  }

  spawnNoteTwo(x = 1200 / 2, y = 0, h = 900) {
    let note = this.add.image(x, y, "mad ball").setScale(5);
    this.notes.push(note);
    this.physics.add.existing(note);
    this.physics.moveTo(note, x, h, null, this.timeToFall);
  }

  spawnNoteThree(x = 1200 / 2, y = 0, h = 900) {
    let note = this.add.image(x, y, "happy ball").setScale(5);
    this.notes.push(note);
    this.physics.add.existing(note);
    this.physics.moveTo(note, x, h, null, this.timeToFall);
  }

  spawnNoteFour(x = 1200 / 2, y = 0, h = 900) {
    let note = this.add.image(x, y, "sad ball").setScale(5);
    this.notes.push(note);
    this.physics.add.existing(note);
    this.physics.moveTo(note, x, h, null, this.timeToFall);
  }
  
//function for the player's input
  handlePlayerInput() {
    //colliders that will interact with the circles at their designated corrdinate
    let collider = this.add.circle(240, 800, 30);
    let collider2 = this.add.circle(480, 800, 30);
    let collider3 = this.add.circle(720, 800, 30);
    let collider4 = this.add.circle(960, 800, 30);
    let colliderX = this.add.rectangle(600, 1200, 1200, 450); //this collider is at the bottom of the screen so if a player misses a note, it will interact with it

    //if the user isn't pressing q, or I guess if they aren't pressing anything and miss the note then...
    //add collider with set instructions
    if (Phaser.Input.Keyboard.JustDown != "q") {
      this.physics.add.existing(colliderX);
      this.tweens.add({
        targets: collider,
        scale: 1.5,
        duration: 100,
        alpha: 0,
        onComplete: () => {
          colliderX.destroy();

          //if the note collides with the collider then the camera will shake, and the score will go down.  The score goes down by 200, but something weird happens where the score goes up then down so we just made it go down by 300 in the code to kind of skip fixing this.  On screen it still subtracts 200 for missing a note
          if (colliderX.collided == true) {
            this.cameras.main.shake(100, 0.01);
            this.score -= 300;
            this.updateScoreText();
          }
        }
      });
      
      // add the collider to the list
      this.colliders.push(colliderX);
    }

    //then again, add colliders at each button
    if (Phaser.Input.Keyboard.JustDown(keyD)) {
      // attach physics
      this.physics.add.existing(collider);
      this.tweens.add({
        targets: collider,
        scale: 1.5,
        duration: 100,
        alpha: 0,
        onComplete: () => {
          collider.destroy();

          if (collider.collided != true) {
            
            this.cameras.main.shake(100, 0.01);
            this.score -= 200;
            this.updateScoreText();
          }
        }
      });
      
      this.colliders.push(collider);
      
    }
    if (Phaser.Input.Keyboard.JustDown(keyF)) {
      this.physics.add.existing(collider2);
      this.tweens.add({
        targets: collider2,
        scale: 1.5,
        duration: 100,
        alpha: 0,
        onComplete: () => {
          collider2.destroy();

          if (collider2.collided != true) {
            this.cameras.main.shake(100, 0.01);
            this.score -= 200;
            this.updateScoreText();
          }
        }
      });

      this.colliders.push(collider2);
      
    }
    if (Phaser.Input.Keyboard.JustDown(keyJ)) {
      this.physics.add.existing(collider3);
      this.tweens.add({
        targets: collider3,
        scale: 1.5,
        duration: 100,
        alpha: 0,
        onComplete: () => {
          collider3.destroy();

          if (collider3.collided != true) {
            this.cameras.main.shake(100, 0.01);
            this.score -= 200;
            this.updateScoreText();
          }
        }
      });
      
      this.colliders.push(collider3);
      
    }
    if (Phaser.Input.Keyboard.JustDown(keyK)) {
      this.physics.add.existing(collider4);
      this.tweens.add({
        targets: collider4,
        scale: 1.5,
        duration: 100,
        alpha: 0,
        onComplete: () => {
          collider4.destroy();

          if (collider4.collided != true) {
            this.cameras.main.shake(100, 0.01);
            this.score -= 200;
            this.updateScoreText();
          }
        }
      });
      
      this.colliders.push(collider4);
    }
  }

  //check if the colliders overalp with the note
  checkNoteCollisions() {
    this.physics.overlap(this.colliders, this.notes, (collider, note) => {
      // the collider collided
      collider.collided = true;

      // remove the collider from list
      this.colliders.splice(this.colliders.indexOf(collider), 1);

      // destroy the note and remove from list
      note.destroy();
      this.notes.splice(this.notes.indexOf(note), 1);

      // increase the score and update the text
      this.score += 100;
      this.updateScoreText();
    });
  }

  //update the score text 
  updateScoreText() {
    this.scoreText.text = this.score;
  }
}

//end scene, screen when you quit
class EndScene {
  preload() {
    this.load.image(
      "end",
      "https://raw.githubusercontent.com/FatherFuj/DROP-/main/Assets/End%20screen%20updated.png" //background image
    );
  }

  create() { 
    //establish keys the user can use
    keyT = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.T);
    keyE = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);
    this.add.image(600, 450, "end"); //add background image
  }

  update() {
    //if user presses E, user will be sent back to the menu
    if (Phaser.Input.Keyboard.JustDown(keyE)) {
      this.scene.add("menu", MenuScene);
      this.scene.start("menu");
    }
    //if user presses T, they will be brought back to the main game scene where the game will start again
    if (Phaser.Input.Keyboard.JustDown(keyT)) {
      this.scene.add("main", MainScene);
      this.scene.start("main");
    }
  }
}
